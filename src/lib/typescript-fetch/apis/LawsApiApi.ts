/* tslint:disable */
/* eslint-disable */
/**
 * 法令APIプロトタイプ
 * <h2>概要</h2> 法令データを取得・検索するための機能をHTTP API方式で提供しています。  <h2>キー要素の解説</h2> 本API（各種エンドポイント）を扱う上で重要な要素について解説します。</br>  * 法令ID（`law_id`）</br> 法令を一意に特定するためのIDです。  * 法令履歴ID（`law_revision_id`）</br> 法令履歴を一意に特定するためのIDです。</br> 法令文書は改正を重ねることで、改版履歴のような版数を持ちます。</br> この版数（法令履歴）を特定するためのIDとなります。  <h2>時点について</h2> 法令APIプロトタイプでは、各法令の過去時点のデータ検索や取得が可能です。</br> 時点指定（`asof`）パラメータを用いることで指定日付時点で有効な法令履歴の特定に役立ちます。  <h2>各エンドポイントの相関性</h2> 各エンドポイントの詳細な説明については、本仕様書で後述されていますのでそちらを参照願います。</br></br> 法令一覧取得API（`/laws`）やキーワード検索API（`/keyword`）を用いて法令を検索し、法令（法令履歴）IDの取得が可能です。</br> その上で法令（法令履歴）単位で以下のようなデータを取得可能です。</br> </br> 法令履歴一覧取得API（`/law_revisions`）：法令履歴（改正履歴）情報を取得</br> 法令本文取得API（`/lawdata`）：法令本文データを取得</br> 添付ファイル取得API（`/attached`）：法令本文に関連する添付ファイルを取得</br></br> ※今回、試験的に法令本文データを別形式（docxなど）にコンバートしたファイルを取得するための法令本文ファイル取得API（`/lawfile`）というエンドポイントを新たに提供しておりますが、こちらも上述のように法令（法令履歴）IDを用いてデータ取得します。</br>  <h2>注意事項</h2> * 本プロトタイプは、一時的な試験提供ですので、実際のシステムへの組み込み等についてはお控えください。実際のサービス提供への活用を頂くには、正式提供している<a href=\"https://elaws.e-gov.go.jp/apitop/\" target=\"_blank\">現行の法令API</a>、もしくは今後検討している高度化後の法令APIをご利用頂く必要があることにご留意ください。  * 使用するデータは、テスト用データのため、一部含まれない法令や、法令標準XMLスキーマには無い属性や項目が含まれていることがあります。  * 本環境はサーバーメンテナンスを行うことがあり、メンテナンス中はご利用がいただけない事があります。また、API仕様についても、テスト期間中に変更される可能性がありますので、ご了承ください。 
 *
 * The version of the OpenAPI document: 2.1.101
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryCd,
  Era,
  ErrorInfo,
  FileType,
  KeywordResponse,
  LawRevisionsResponse,
  LawType,
  LawdataResponse,
  LawsResponse,
  Mission,
  OrderNo,
  RepealStatus,
  ResponseFormat,
  Status,
} from '../models/index';
import {
    CategoryCdFromJSON,
    CategoryCdToJSON,
    EraFromJSON,
    EraToJSON,
    ErrorInfoFromJSON,
    ErrorInfoToJSON,
    FileTypeFromJSON,
    FileTypeToJSON,
    KeywordResponseFromJSON,
    KeywordResponseToJSON,
    LawRevisionsResponseFromJSON,
    LawRevisionsResponseToJSON,
    LawTypeFromJSON,
    LawTypeToJSON,
    LawdataResponseFromJSON,
    LawdataResponseToJSON,
    LawsResponseFromJSON,
    LawsResponseToJSON,
    MissionFromJSON,
    MissionToJSON,
    OrderNoFromJSON,
    OrderNoToJSON,
    RepealStatusFromJSON,
    RepealStatusToJSON,
    ResponseFormatFromJSON,
    ResponseFormatToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface GetAttachedRequest {
    lawRevisionId: string;
    src?: string;
}

export interface GetKeywordRequest {
    keyword: string;
    lawType?: Array<LawType>;
    promulgationDateFrom?: Date;
    promulgationDateTo?: Date;
    asof?: Date;
    lawNum?: string;
    lawNumEra?: Era;
    lawNumYear?: number;
    lawNumType?: LawType;
    lawNumNum?: string;
    categoryCd?: Array<CategoryCd>;
    order?: Array<string>;
    orderNo?: OrderNo;
    limit?: number;
    offset?: number;
    responseFormat?: ResponseFormat | null;
}

export interface GetLawdataRequest {
    lawId?: string;
    lawNum?: string;
    asof?: Date;
    elm?: string;
    omitLawFullText?: boolean;
    omitAmendmentSupplProvision?: boolean;
    includeAttachedFileContent?: boolean;
    responseFormat?: ResponseFormat | null;
}

export interface GetLawfileRequest {
    lawRevisionId: string;
    fileType: FileType;
}

export interface GetLawlistRequest {
    asof?: Date;
    lawId?: string;
    lawNum?: string;
    lawNumEra?: Era;
    lawNumYear?: number;
    lawNumType?: LawType;
    lawNumNum?: string;
    promulgationDateFrom?: Date;
    promulgationDateTo?: Date;
    lawType?: Array<LawType>;
    lawTitle?: string;
    lawTitleKana?: string;
    lawTitleKanaseion?: string;
    amendmentDateFrom?: Date;
    amendmentDateTo?: Date;
    amendmentPromulgateDateFrom?: Date;
    amendmentPromulgateDateTo?: Date;
    amendmentLawId?: string;
    amendmentLawTitle?: string;
    amendmentLawTitleKana?: string;
    amendmentLawTitleKanaseion?: string;
    amendmentLawNum?: string;
    updatedFrom?: Date;
    updatedTo?: Date;
    repealStatus?: Array<RepealStatus>;
    repealDateFrom?: Date;
    repealDateTo?: Date;
    remainInForce?: boolean;
    categoryCd?: Array<CategoryCd>;
    mission?: Array<Mission>;
    status?: Array<Status>;
    omitCurrentRevisionInfo?: boolean;
    order?: Array<string>;
    orderNo?: OrderNo;
    limit?: number;
    offset?: number;
    responseFormat?: ResponseFormat | null;
}

export interface GetRevisionsRequest {
    lawId?: string;
    lawNum?: string;
    lawTitle?: string;
    lawTitleKana?: string;
    lawTitleKanaseion?: string;
    amendmentDateFrom?: Date;
    amendmentDateTo?: Date;
    amendmentPromulgateDateFrom?: Date;
    amendmentPromulgateDateTo?: Date;
    amendmentLawId?: string;
    amendmentLawTitle?: string;
    amendmentLawTitleKana?: string;
    amendmentLawTitleKanaseion?: string;
    amendmentLawNum?: string;
    updatedFrom?: Date;
    updatedTo?: Date;
    repealStatus?: Array<RepealStatus>;
    repealDateFrom?: Date;
    repealDateTo?: Date;
    remainInForce?: boolean;
    categoryCd?: Array<CategoryCd>;
    mission?: Array<Mission>;
    status?: Array<Status>;
    responseFormat?: ResponseFormat | null;
}

/**
 * 
 */
export class LawsApiApi extends runtime.BaseAPI {

    /**
     * <h2>概要</h2> 法令本文の添付ファイル（様式や図など）を取得します。</br> 法令履歴を特定するために、法令履歴ID（`law_revision_id`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> 法令本文中の添付ファイルのsrc属性（`src`）のパラメータ指定有無で以下の挙動の違いがあります。また、該当パラメータに指定する値は、法令本文取得API（`/lawdata`）のレスポンス情報より`attached_files_info`の中に含まれる法令本文中の添付ファイルのsrc属性（`src`）要素の値を指定します。  * <h3>法令本文中の添付ファイルのsrc属性（`src`）指定無しの場合</h3> 指定した法令履歴の全ての添付ファイルを pict フォルダに格納してZIP圧縮したバイナリデータが取得できます。  * <h3>法令本文中の添付ファイルのsrc属性（`src`）指定有りの場合</h3> 指定した添付ファイルのバイナリデータが取得できます。  <h2>その他補足事項</h2> 添付ファイルはjpg、png、pdf、docxのいずれかが返却されます。 
     * 添付ファイル取得API
     */
    async getAttachedRaw(requestParameters: GetAttachedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.lawRevisionId === null || requestParameters.lawRevisionId === undefined) {
            throw new runtime.RequiredError('lawRevisionId','Required parameter requestParameters.lawRevisionId was null or undefined when calling getAttached.');
        }

        const queryParameters: any = {};

        if (requestParameters.lawRevisionId !== undefined) {
            queryParameters['law_revision_id'] = requestParameters.lawRevisionId;
        }

        if (requestParameters.src !== undefined) {
            queryParameters['src'] = requestParameters.src;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/attached`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * <h2>概要</h2> 法令本文の添付ファイル（様式や図など）を取得します。</br> 法令履歴を特定するために、法令履歴ID（`law_revision_id`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> 法令本文中の添付ファイルのsrc属性（`src`）のパラメータ指定有無で以下の挙動の違いがあります。また、該当パラメータに指定する値は、法令本文取得API（`/lawdata`）のレスポンス情報より`attached_files_info`の中に含まれる法令本文中の添付ファイルのsrc属性（`src`）要素の値を指定します。  * <h3>法令本文中の添付ファイルのsrc属性（`src`）指定無しの場合</h3> 指定した法令履歴の全ての添付ファイルを pict フォルダに格納してZIP圧縮したバイナリデータが取得できます。  * <h3>法令本文中の添付ファイルのsrc属性（`src`）指定有りの場合</h3> 指定した添付ファイルのバイナリデータが取得できます。  <h2>その他補足事項</h2> 添付ファイルはjpg、png、pdf、docxのいずれかが返却されます。 
     * 添付ファイル取得API
     */
    async getAttached(requestParameters: GetAttachedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getAttachedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <h2>概要</h2> 指定したキーワードを法令本文に含む法令の一覧を取得します。（法令本文を対象とした全文検索を行います。）</br> 少なくとも、1つの検索ワード（`keyword`）を指定する必要があります。  <h2>Parametersに関する補足事項</h2> パラメータの多くは、 <a href=\"#model-keyword_response\">keyword_response</a> に定義されているレスポンス中、 `items` の各要素の `law_info` または `revision_info` の同名のプロパティに対応します（例えば、 `law_num` や `law_title` など）。パラメータを指定することで、これらのプロパティの値を対象にフィルタを行い、 `items` に格納する法令や、検索対象の改正履歴を選択するように動作します。  <h2>その他補足事項</h2> 指定した条件に該当する複数の法令をレスポンスの `items` に格納します。</br> また、それぞれの法令について、下記の情報を格納します。  * `law_info` - 改正履歴に依存しない法令情報を格納します。法令番号など、改正されない情報が該当します。法令名は改正されることがありますので、改正履歴に依存する法令情報（`revision_info`）に格納されます。 * `revision_info` - 改正履歴に依存する法令情報（改正されうる情報や、改正時点に関する情報）について、指定した条件に合致する一つの改正履歴の情報を格納します。時点指定（`asof`）などを指定しない場合は現時点で最新の改正履歴、時点指定（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。 * `sentence` - 版の段落内本文を格納します。 
     * キーワード検索API
     */
    async getKeywordRaw(requestParameters: GetKeywordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeywordResponse>> {
        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling getKeyword.');
        }

        const queryParameters: any = {};

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.lawType) {
            queryParameters['law_type'] = requestParameters.lawType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.promulgationDateFrom !== undefined) {
            queryParameters['promulgation_date_from'] = (requestParameters.promulgationDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.promulgationDateTo !== undefined) {
            queryParameters['promulgation_date_to'] = (requestParameters.promulgationDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.asof !== undefined) {
            queryParameters['asof'] = (requestParameters.asof as any).toISOString().substring(0,10);
        }

        if (requestParameters.lawNum !== undefined) {
            queryParameters['law_num'] = requestParameters.lawNum;
        }

        if (requestParameters.lawNumEra !== undefined) {
            queryParameters['law_num_era'] = requestParameters.lawNumEra;
        }

        if (requestParameters.lawNumYear !== undefined) {
            queryParameters['law_num_year'] = requestParameters.lawNumYear;
        }

        if (requestParameters.lawNumType !== undefined) {
            queryParameters['law_num_type'] = requestParameters.lawNumType;
        }

        if (requestParameters.lawNumNum !== undefined) {
            queryParameters['law_num_num'] = requestParameters.lawNumNum;
        }

        if (requestParameters.categoryCd) {
            queryParameters['category_cd'] = requestParameters.categoryCd.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.order) {
            queryParameters['order'] = requestParameters.order.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.orderNo !== undefined) {
            queryParameters['order_no'] = requestParameters.orderNo;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/keyword`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeywordResponseFromJSON(jsonValue));
    }

    /**
     * <h2>概要</h2> 指定したキーワードを法令本文に含む法令の一覧を取得します。（法令本文を対象とした全文検索を行います。）</br> 少なくとも、1つの検索ワード（`keyword`）を指定する必要があります。  <h2>Parametersに関する補足事項</h2> パラメータの多くは、 <a href=\"#model-keyword_response\">keyword_response</a> に定義されているレスポンス中、 `items` の各要素の `law_info` または `revision_info` の同名のプロパティに対応します（例えば、 `law_num` や `law_title` など）。パラメータを指定することで、これらのプロパティの値を対象にフィルタを行い、 `items` に格納する法令や、検索対象の改正履歴を選択するように動作します。  <h2>その他補足事項</h2> 指定した条件に該当する複数の法令をレスポンスの `items` に格納します。</br> また、それぞれの法令について、下記の情報を格納します。  * `law_info` - 改正履歴に依存しない法令情報を格納します。法令番号など、改正されない情報が該当します。法令名は改正されることがありますので、改正履歴に依存する法令情報（`revision_info`）に格納されます。 * `revision_info` - 改正履歴に依存する法令情報（改正されうる情報や、改正時点に関する情報）について、指定した条件に合致する一つの改正履歴の情報を格納します。時点指定（`asof`）などを指定しない場合は現時点で最新の改正履歴、時点指定（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。 * `sentence` - 版の段落内本文を格納します。 
     * キーワード検索API
     */
    async getKeyword(requestParameters: GetKeywordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeywordResponse> {
        const response = await this.getKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <h2>概要</h2> 法令の本文を取得します。</br> 法令を特定するために、法令ID（`law_id`）もしくは法令番号（`law_num`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> 本エンドポイントは、一つの法令履歴を特定する必要があります。</br> 法令ID（`law_id`）の指定について、以下の2通りの方法がありますので解説します。  * <h3>法令履歴IDが判明している場合</h3> 法令ID（`law_id`）に法令履歴IDを指定してAPI実行します。</br> ※時点指定（`asof`）を合わせて指定しても、法令履歴IDの指定が優先Hitします。  * <h3>法令履歴IDが判明していない場合</h3> 法令ID（`law_id`）に法令IDを指定し、あわせて時点指定（`asof`）を指定してAPIを実行してください。</br> ※指定した日付時点で最新の法令履歴の法令本文を取得します。  <h3>その他のユースケース</h3> 取得する条項など要素（`elm`）パラメータを指定することで、本文中、条項など、一部を指定して取得することもできます。   <h2>その他補足事項</h2> 指定した条件に該当する1つの法令について、本文をレスポンスの `law_full_text` に格納します。</br> また、下記の情報を格納します。  * `law_info` - 改正履歴に依存しない法令情報を格納します。法令番号など、改正されない情報が該当します。法令名は改正されることがありますので、改正履歴に依存する法令情報（`revision_info`）に格納されます。 * `revision_info` - 改正履歴に依存する法令情報（改正されうる情報や、改正時点に関する情報）について、指定した条件に合致する一つの改正履歴の情報を格納します。時点指定（`asof`）を指定しない場合は現時点で最新の改正履歴、時点指定（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。  <h3>法令本文データ仕様について</h3> レスポンス形式（`response_format`）の指定によりAPIのレスポンス形式が\"xml\"または\"json\"に切り替わりますが、これに伴い`law_full_text`も以下のように変わります。<br/> * **\"xml\"**が指定された場合、法令標準XMLスキーマに準拠したXMLを格納します。<br/> * **\"json\"**が指定された場合、法令標準XMLと相互に変換可能なjson形式を格納します。<br/> このjson仕様は暫定的なものですが、法令標準XMLのタグ、属性、子要素がそれぞれ「tag」、「attr」、「children」に対応し、内容は法令標準XMLと同様となります。<br/>  <h4>法令標準XMLとJSONの対応表</h4> 法令標準XMLスキーマについては<a href=\"https://elaws.e-gov.go.jp/file/XMLSchemaForJapaneseLaw_v3.xsd\" target=\"_blank\">こちら</a>を参照してください。<br/> 例）\\<Sentence Num=\"1\" WritingMode=\"vertical\">         この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・\\</Sentence> </font> <table bgcolor=\"white\" border=\"1\">   <tr bgcolor=\"#DDFFFF\">     <th width=\"10%\">項目名</th>     <th width=\"45%\">XML</th>     <th width=\"45%\">JSON</th>   </tr>   <tr>     <td>タグ</td>     <td>Sentence</td>     <td>\"tag\": \"Sentence\"</td>   </tr>   <tr>     <td>属性</td>     <td>Num=\"1\" WritingMode=\"vertical\"</td>     <td>\"attr\": {\"Num\": \"1\",\"WritingMode\": \"vertical\"}</td>     </tr>   <tr>     <td>子要素</td>     <td>この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・</td>     <td>\"children\": [\"この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・\"]</td>   </tr> </table> 
     * 法令本文取得API
     */
    async getLawdataRaw(requestParameters: GetLawdataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LawdataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.lawId !== undefined) {
            queryParameters['law_id'] = requestParameters.lawId;
        }

        if (requestParameters.lawNum !== undefined) {
            queryParameters['law_num'] = requestParameters.lawNum;
        }

        if (requestParameters.asof !== undefined) {
            queryParameters['asof'] = (requestParameters.asof as any).toISOString().substring(0,10);
        }

        if (requestParameters.elm !== undefined) {
            queryParameters['elm'] = requestParameters.elm;
        }

        if (requestParameters.omitLawFullText !== undefined) {
            queryParameters['omit_law_full_text'] = requestParameters.omitLawFullText;
        }

        if (requestParameters.omitAmendmentSupplProvision !== undefined) {
            queryParameters['omit_amendment_suppl_provision'] = requestParameters.omitAmendmentSupplProvision;
        }

        if (requestParameters.includeAttachedFileContent !== undefined) {
            queryParameters['include_attached_file_content'] = requestParameters.includeAttachedFileContent;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lawdata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LawdataResponseFromJSON(jsonValue));
    }

    /**
     * <h2>概要</h2> 法令の本文を取得します。</br> 法令を特定するために、法令ID（`law_id`）もしくは法令番号（`law_num`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> 本エンドポイントは、一つの法令履歴を特定する必要があります。</br> 法令ID（`law_id`）の指定について、以下の2通りの方法がありますので解説します。  * <h3>法令履歴IDが判明している場合</h3> 法令ID（`law_id`）に法令履歴IDを指定してAPI実行します。</br> ※時点指定（`asof`）を合わせて指定しても、法令履歴IDの指定が優先Hitします。  * <h3>法令履歴IDが判明していない場合</h3> 法令ID（`law_id`）に法令IDを指定し、あわせて時点指定（`asof`）を指定してAPIを実行してください。</br> ※指定した日付時点で最新の法令履歴の法令本文を取得します。  <h3>その他のユースケース</h3> 取得する条項など要素（`elm`）パラメータを指定することで、本文中、条項など、一部を指定して取得することもできます。   <h2>その他補足事項</h2> 指定した条件に該当する1つの法令について、本文をレスポンスの `law_full_text` に格納します。</br> また、下記の情報を格納します。  * `law_info` - 改正履歴に依存しない法令情報を格納します。法令番号など、改正されない情報が該当します。法令名は改正されることがありますので、改正履歴に依存する法令情報（`revision_info`）に格納されます。 * `revision_info` - 改正履歴に依存する法令情報（改正されうる情報や、改正時点に関する情報）について、指定した条件に合致する一つの改正履歴の情報を格納します。時点指定（`asof`）を指定しない場合は現時点で最新の改正履歴、時点指定（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。  <h3>法令本文データ仕様について</h3> レスポンス形式（`response_format`）の指定によりAPIのレスポンス形式が\"xml\"または\"json\"に切り替わりますが、これに伴い`law_full_text`も以下のように変わります。<br/> * **\"xml\"**が指定された場合、法令標準XMLスキーマに準拠したXMLを格納します。<br/> * **\"json\"**が指定された場合、法令標準XMLと相互に変換可能なjson形式を格納します。<br/> このjson仕様は暫定的なものですが、法令標準XMLのタグ、属性、子要素がそれぞれ「tag」、「attr」、「children」に対応し、内容は法令標準XMLと同様となります。<br/>  <h4>法令標準XMLとJSONの対応表</h4> 法令標準XMLスキーマについては<a href=\"https://elaws.e-gov.go.jp/file/XMLSchemaForJapaneseLaw_v3.xsd\" target=\"_blank\">こちら</a>を参照してください。<br/> 例）\\<Sentence Num=\"1\" WritingMode=\"vertical\">         この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・\\</Sentence> </font> <table bgcolor=\"white\" border=\"1\">   <tr bgcolor=\"#DDFFFF\">     <th width=\"10%\">項目名</th>     <th width=\"45%\">XML</th>     <th width=\"45%\">JSON</th>   </tr>   <tr>     <td>タグ</td>     <td>Sentence</td>     <td>\"tag\": \"Sentence\"</td>   </tr>   <tr>     <td>属性</td>     <td>Num=\"1\" WritingMode=\"vertical\"</td>     <td>\"attr\": {\"Num\": \"1\",\"WritingMode\": \"vertical\"}</td>     </tr>   <tr>     <td>子要素</td>     <td>この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・</td>     <td>\"children\": [\"この法律は、処分、行政指導及び届出に関する手続並びに命令等を定める手続に関し、・・・\"]</td>   </tr> </table> 
     * 法令本文取得API
     */
    async getLawdata(requestParameters: GetLawdataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LawdataResponse> {
        const response = await this.getLawdataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <h2>概要</h2> 法令本文を指定したファイル種別（`file_type`）にコンバートした法令本文ファイルを取得します。</br> 法令履歴を特定するために、法令履歴ID（`law_revision_id`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> 特にありません。  <h2>その他補足事項</h2> 指定したファイル種別のバイナリデータが取得できます。  * 本エンドポイントは、試験的に提供しているエンドポイントとなります。</br> * docx形式のみ、API実行毎にオンデマンド変換を行うため、応答を得るまでに時間を要することがあります。</br> * その他のファイル種別は、予めコンバート済みのファイルを返しています。 
     * 法令本文ファイル取得API
     */
    async getLawfileRaw(requestParameters: GetLawfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.lawRevisionId === null || requestParameters.lawRevisionId === undefined) {
            throw new runtime.RequiredError('lawRevisionId','Required parameter requestParameters.lawRevisionId was null or undefined when calling getLawfile.');
        }

        if (requestParameters.fileType === null || requestParameters.fileType === undefined) {
            throw new runtime.RequiredError('fileType','Required parameter requestParameters.fileType was null or undefined when calling getLawfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.lawRevisionId !== undefined) {
            queryParameters['law_revision_id'] = requestParameters.lawRevisionId;
        }

        if (requestParameters.fileType !== undefined) {
            queryParameters['file_type'] = requestParameters.fileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lawfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * <h2>概要</h2> 法令本文を指定したファイル種別（`file_type`）にコンバートした法令本文ファイルを取得します。</br> 法令履歴を特定するために、法令履歴ID（`law_revision_id`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> 特にありません。  <h2>その他補足事項</h2> 指定したファイル種別のバイナリデータが取得できます。  * 本エンドポイントは、試験的に提供しているエンドポイントとなります。</br> * docx形式のみ、API実行毎にオンデマンド変換を行うため、応答を得るまでに時間を要することがあります。</br> * その他のファイル種別は、予めコンバート済みのファイルを返しています。 
     * 法令本文ファイル取得API
     */
    async getLawfile(requestParameters: GetLawfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getLawfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <h2>概要</h2> 指定条件に該当する法令の一覧を検索して取得します。  <h2>Parametersに関する補足事項</h2> 様々な法令検索のニーズに対応するため、非常に多くのパラメータを用意していますが、必ずしも全てのパラメータを指定する必要はありません。以下のユースケースに対応した、最低限の指定パラメータ要素の一例を解説します。  * <h3>指定時点で有効な法令一覧を取得したい場合</h3> 時点指定（`asof`）に日付を指定してAPIを実行してください。  * <h3>法令番号で法令を検索したい場合</h3> 法令番号（`law_num`）を指定してAPIを実行してください。  * <h3>法令名で法令を検索したい場合</h3> 法令名もしくは法令略称（`law_title`）を指定してAPIを実行してください。  <h3>その他絞り込み（フィルタ）条件について</h3> パラメータの多くは、 <a href=\"#model-lawdata_response\">lawdata_response</a> に定義されているレスポンス中、 `laws` の各要素の `law_info` または `revision_info` の同名のプロパティに対応します（例えば、 `law_num` や `law_title` など）。パラメータを指定することで、これらのプロパティの値を対象にフィルタを行い、 `laws` に格納する法令や、 `revision_info` に格納する改正履歴を選択するように動作します。  <h2>その他補足事項</h2> このエンドポイントは、指定した条件に該当する複数の法令をレスポンスの `laws` に格納します。</br> それぞれの法令について、下記の情報を格納します。  * `law_info` - 改正履歴に依存しない法令情報を格納します。法令番号など、改正されない情報が該当します。法令名は改正されることがありますので、改正履歴に依存する法令情報（`revision_info`や `current_revision_info`）に格納されます。 * `revision_info` - 改正履歴に依存する法令情報（改正されうる情報や、改正時点に関する情報）について、指定した条件に合致する一つの改正履歴の情報を格納します。時点指定（`asof`）などを指定しない場合は現時点で最新の改正履歴、時点指定（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。 * `current_revision_info` - 時点指定（`asof`）などの指定にかかわらず、現在以前の最後の改正履歴を格納します。 
     * 法令一覧取得API
     */
    async getLawlistRaw(requestParameters: GetLawlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LawsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.asof !== undefined) {
            queryParameters['asof'] = (requestParameters.asof as any).toISOString().substring(0,10);
        }

        if (requestParameters.lawId !== undefined) {
            queryParameters['law_id'] = requestParameters.lawId;
        }

        if (requestParameters.lawNum !== undefined) {
            queryParameters['law_num'] = requestParameters.lawNum;
        }

        if (requestParameters.lawNumEra !== undefined) {
            queryParameters['law_num_era'] = requestParameters.lawNumEra;
        }

        if (requestParameters.lawNumYear !== undefined) {
            queryParameters['law_num_year'] = requestParameters.lawNumYear;
        }

        if (requestParameters.lawNumType !== undefined) {
            queryParameters['law_num_type'] = requestParameters.lawNumType;
        }

        if (requestParameters.lawNumNum !== undefined) {
            queryParameters['law_num_num'] = requestParameters.lawNumNum;
        }

        if (requestParameters.promulgationDateFrom !== undefined) {
            queryParameters['promulgation_date_from'] = (requestParameters.promulgationDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.promulgationDateTo !== undefined) {
            queryParameters['promulgation_date_to'] = (requestParameters.promulgationDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.lawType) {
            queryParameters['law_type'] = requestParameters.lawType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.lawTitle !== undefined) {
            queryParameters['law_title'] = requestParameters.lawTitle;
        }

        if (requestParameters.lawTitleKana !== undefined) {
            queryParameters['law_title_kana'] = requestParameters.lawTitleKana;
        }

        if (requestParameters.lawTitleKanaseion !== undefined) {
            queryParameters['law_title_kanaseion'] = requestParameters.lawTitleKanaseion;
        }

        if (requestParameters.amendmentDateFrom !== undefined) {
            queryParameters['amendment_date_from'] = (requestParameters.amendmentDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentDateTo !== undefined) {
            queryParameters['amendment_date_to'] = (requestParameters.amendmentDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentPromulgateDateFrom !== undefined) {
            queryParameters['amendment_promulgate_date_from'] = (requestParameters.amendmentPromulgateDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentPromulgateDateTo !== undefined) {
            queryParameters['amendment_promulgate_date_to'] = (requestParameters.amendmentPromulgateDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentLawId !== undefined) {
            queryParameters['amendment_law_id'] = requestParameters.amendmentLawId;
        }

        if (requestParameters.amendmentLawTitle !== undefined) {
            queryParameters['amendment_law_title'] = requestParameters.amendmentLawTitle;
        }

        if (requestParameters.amendmentLawTitleKana !== undefined) {
            queryParameters['amendment_law_title_kana'] = requestParameters.amendmentLawTitleKana;
        }

        if (requestParameters.amendmentLawTitleKanaseion !== undefined) {
            queryParameters['amendment_law_title_kanaseion'] = requestParameters.amendmentLawTitleKanaseion;
        }

        if (requestParameters.amendmentLawNum !== undefined) {
            queryParameters['amendment_law_num'] = requestParameters.amendmentLawNum;
        }

        if (requestParameters.updatedFrom !== undefined) {
            queryParameters['updated_from'] = (requestParameters.updatedFrom as any).toISOString();
        }

        if (requestParameters.updatedTo !== undefined) {
            queryParameters['updated_to'] = (requestParameters.updatedTo as any).toISOString();
        }

        if (requestParameters.repealStatus) {
            queryParameters['repeal_status'] = requestParameters.repealStatus.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.repealDateFrom !== undefined) {
            queryParameters['repeal_date_from'] = (requestParameters.repealDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.repealDateTo !== undefined) {
            queryParameters['repeal_date_to'] = (requestParameters.repealDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.remainInForce !== undefined) {
            queryParameters['remain_in_force'] = requestParameters.remainInForce;
        }

        if (requestParameters.categoryCd) {
            queryParameters['category_cd'] = requestParameters.categoryCd.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.mission) {
            queryParameters['mission'] = requestParameters.mission.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.omitCurrentRevisionInfo !== undefined) {
            queryParameters['omit_current_revision_info'] = requestParameters.omitCurrentRevisionInfo;
        }

        if (requestParameters.order) {
            queryParameters['order'] = requestParameters.order.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.orderNo !== undefined) {
            queryParameters['order_no'] = requestParameters.orderNo;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/laws`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LawsResponseFromJSON(jsonValue));
    }

    /**
     * <h2>概要</h2> 指定条件に該当する法令の一覧を検索して取得します。  <h2>Parametersに関する補足事項</h2> 様々な法令検索のニーズに対応するため、非常に多くのパラメータを用意していますが、必ずしも全てのパラメータを指定する必要はありません。以下のユースケースに対応した、最低限の指定パラメータ要素の一例を解説します。  * <h3>指定時点で有効な法令一覧を取得したい場合</h3> 時点指定（`asof`）に日付を指定してAPIを実行してください。  * <h3>法令番号で法令を検索したい場合</h3> 法令番号（`law_num`）を指定してAPIを実行してください。  * <h3>法令名で法令を検索したい場合</h3> 法令名もしくは法令略称（`law_title`）を指定してAPIを実行してください。  <h3>その他絞り込み（フィルタ）条件について</h3> パラメータの多くは、 <a href=\"#model-lawdata_response\">lawdata_response</a> に定義されているレスポンス中、 `laws` の各要素の `law_info` または `revision_info` の同名のプロパティに対応します（例えば、 `law_num` や `law_title` など）。パラメータを指定することで、これらのプロパティの値を対象にフィルタを行い、 `laws` に格納する法令や、 `revision_info` に格納する改正履歴を選択するように動作します。  <h2>その他補足事項</h2> このエンドポイントは、指定した条件に該当する複数の法令をレスポンスの `laws` に格納します。</br> それぞれの法令について、下記の情報を格納します。  * `law_info` - 改正履歴に依存しない法令情報を格納します。法令番号など、改正されない情報が該当します。法令名は改正されることがありますので、改正履歴に依存する法令情報（`revision_info`や `current_revision_info`）に格納されます。 * `revision_info` - 改正履歴に依存する法令情報（改正されうる情報や、改正時点に関する情報）について、指定した条件に合致する一つの改正履歴の情報を格納します。時点指定（`asof`）などを指定しない場合は現時点で最新の改正履歴、時点指定（`asof`）を指定した場合はその時点で最新の改正履歴を格納します。 * `current_revision_info` - 時点指定（`asof`）などの指定にかかわらず、現在以前の最後の改正履歴を格納します。 
     * 法令一覧取得API
     */
    async getLawlist(requestParameters: GetLawlistRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LawsResponse> {
        const response = await this.getLawlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <h2>概要</h2> 法令の改正履歴の一覧を取得します。</br> 法令を特定するために、法令ID（`law_id`）もしくは法令番号（`law_num`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> パラメータの多くは、 <a href=\"#model-law_revisions_response\">law_revisions_response</a> に定義されているレスポンス中、 `revisions` の各要素の同名のプロパティに対応します。パラメータを指定することで、これらのプロパティの値を対象にフィルタを行い、 `revisions` に格納する改正履歴を選択するように動作します。  <h2>その他補足事項</h2> 指定した条件に該当する1つの法令について、改正履歴の一覧をレスポンスの `revisions` に格納します。 
     * 法令履歴一覧取得API
     */
    async getRevisionsRaw(requestParameters: GetRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LawRevisionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.lawId !== undefined) {
            queryParameters['law_id'] = requestParameters.lawId;
        }

        if (requestParameters.lawNum !== undefined) {
            queryParameters['law_num'] = requestParameters.lawNum;
        }

        if (requestParameters.lawTitle !== undefined) {
            queryParameters['law_title'] = requestParameters.lawTitle;
        }

        if (requestParameters.lawTitleKana !== undefined) {
            queryParameters['law_title_kana'] = requestParameters.lawTitleKana;
        }

        if (requestParameters.lawTitleKanaseion !== undefined) {
            queryParameters['law_title_kanaseion'] = requestParameters.lawTitleKanaseion;
        }

        if (requestParameters.amendmentDateFrom !== undefined) {
            queryParameters['amendment_date_from'] = (requestParameters.amendmentDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentDateTo !== undefined) {
            queryParameters['amendment_date_to'] = (requestParameters.amendmentDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentPromulgateDateFrom !== undefined) {
            queryParameters['amendment_promulgate_date_from'] = (requestParameters.amendmentPromulgateDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentPromulgateDateTo !== undefined) {
            queryParameters['amendment_promulgate_date_to'] = (requestParameters.amendmentPromulgateDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.amendmentLawId !== undefined) {
            queryParameters['amendment_law_id'] = requestParameters.amendmentLawId;
        }

        if (requestParameters.amendmentLawTitle !== undefined) {
            queryParameters['amendment_law_title'] = requestParameters.amendmentLawTitle;
        }

        if (requestParameters.amendmentLawTitleKana !== undefined) {
            queryParameters['amendment_law_title_kana'] = requestParameters.amendmentLawTitleKana;
        }

        if (requestParameters.amendmentLawTitleKanaseion !== undefined) {
            queryParameters['amendment_law_title_kanaseion'] = requestParameters.amendmentLawTitleKanaseion;
        }

        if (requestParameters.amendmentLawNum !== undefined) {
            queryParameters['amendment_law_num'] = requestParameters.amendmentLawNum;
        }

        if (requestParameters.updatedFrom !== undefined) {
            queryParameters['updated_from'] = (requestParameters.updatedFrom as any).toISOString();
        }

        if (requestParameters.updatedTo !== undefined) {
            queryParameters['updated_to'] = (requestParameters.updatedTo as any).toISOString();
        }

        if (requestParameters.repealStatus) {
            queryParameters['repeal_status'] = requestParameters.repealStatus.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.repealDateFrom !== undefined) {
            queryParameters['repeal_date_from'] = (requestParameters.repealDateFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.repealDateTo !== undefined) {
            queryParameters['repeal_date_to'] = (requestParameters.repealDateTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.remainInForce !== undefined) {
            queryParameters['remain_in_force'] = requestParameters.remainInForce;
        }

        if (requestParameters.categoryCd) {
            queryParameters['category_cd'] = requestParameters.categoryCd.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.mission) {
            queryParameters['mission'] = requestParameters.mission.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.responseFormat !== undefined) {
            queryParameters['response_format'] = requestParameters.responseFormat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/law_revisions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LawRevisionsResponseFromJSON(jsonValue));
    }

    /**
     * <h2>概要</h2> 法令の改正履歴の一覧を取得します。</br> 法令を特定するために、法令ID（`law_id`）もしくは法令番号（`law_num`）の指定が必須となります。  <h2>Parametersに関する補足事項</h2> パラメータの多くは、 <a href=\"#model-law_revisions_response\">law_revisions_response</a> に定義されているレスポンス中、 `revisions` の各要素の同名のプロパティに対応します。パラメータを指定することで、これらのプロパティの値を対象にフィルタを行い、 `revisions` に格納する改正履歴を選択するように動作します。  <h2>その他補足事項</h2> 指定した条件に該当する1つの法令について、改正履歴の一覧をレスポンスの `revisions` に格納します。 
     * 法令履歴一覧取得API
     */
    async getRevisions(requestParameters: GetRevisionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LawRevisionsResponse> {
        const response = await this.getRevisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
